import cv2
import numpy as np

# Initialize video capture from the webcam
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Image processing for Sudoku puzzle detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)

    # Find contours in the edged image
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Sort contours by area and find the largest contour (presumed Sudoku puzzle)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:1]

    # Approximate the contour to a polygon
    epsilon = 0.02 * cv2.arcLength(contours[0], True)
    approx = cv2.approxPolyDP(contours[0], epsilon, True)

    # Draw the contour on the original frame
    cv2.drawContours(frame, [approx], -1, (0, 255, 0), 2)

    # If a Sudoku puzzle is detected (assuming 4 corners), proceed with digit identification
    if len(approx) == 4:
        # Define the destination points for the corrected projective transformation
        pts_dst = np.array([[460, 460], [0, 460], [0, 0], [460, 0]], dtype=np.float32)

        # Perform projective transformation
        matrix = cv2.getPerspectiveTransform(approx.reshape(4, 2).astype(np.float32), pts_dst)
        warped = cv2.warpPerspective(frame, matrix, (460, 460))

        # Perform rotation to correct the orientation (90 degrees counterclockwise)
        warped = cv2.rotate(warped, cv2.ROTATE_90_COUNTERCLOCKWISE)

        # Flip the warped image vertically (180 degrees)
        warped = cv2.flip(warped, 1)

        # Display the warped image for digit identification (you can comment this line if not needed)
        cv2.imshow('Warped Image', warped)

        # TODO: Implement digit identification on the warped image

    # Display the resulting frame
    cv2.imshow('Sudoku Recognition', frame)

    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
